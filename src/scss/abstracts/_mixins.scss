@use 'sass:string';
@use 'sass:map';
@use 'variables' as *;

// =============================================================================
// ================ OPTIMIZED MIXINS ======================================
// =============================================================================
// Залишені тільки справді повторювані міксіни (використовуються 3+ рази)
// Removed complex mixins with many parameters
// Simplified mixins for frequently used patterns
// =============================================================================

// ==========================================================================
// BUTTONS (needed for section-styles)
// ==========================================================================
@mixin button($key) {
    $btn-map: map.get($button-styles-map, $key);
    
    @if map.has-key($btn-map, bg-color) {
        background-color: map.get($btn-map, bg-color);
    }

    @if map.has-key($btn-map, text-color) {
        color: map.get($btn-map, text-color);
    }

    @if map.has-key($btn-map, border) {
        border: map.get($btn-map, border);
    }

    @if map.has-key($btn-map, padding) {
        padding: map.get($btn-map, padding);
    }

    @if map.has-key($btn-map, font-size) {
        font-size: map.get($btn-map, font-size);
    }

    @if map.has-key($btn-map, font-weight) {
        font-weight: map.get($btn-map, font-weight);
    }

    @if map.has-key($btn-map, border-radius) {
        border-radius: map.get($btn-map, border-radius);
    }
    
    line-height: $line-height-single;
    text-align: center;
    cursor: pointer;
    
    @if map.get($btn-map, hover-effect) {
        @include hover-effect(map.get($btn-map, hover-effect));
    }

    @if map.get($btn-map, selected-effect) {
        @include selected-effect(map.get($btn-map, selected-effect));
    }

    @if map.get($btn-map, press-effect) {
        @include press-effect(map.get($btn-map, press-effect));
    }
    
    &.disabled {
        opacity: 0.5;
        pointer-events: none;
        cursor: not-allowed;
    }
}

// ==========================================================================
// MAIN LAYOUT MIXINS (used many times)
// ==========================================================================

// grid-responsive mixin removed (used only 2 times)

// flex-responsive mixin removed (trivial, better to write CSS directly)

// Split section placeholder for @extend
%split-section {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0;
    
    @media (max-width: $breakpoint-tablet) {
        grid-template-columns: 1fr;
        min-height: auto;
    }
    
    .offer-banner {
        display: flex;
        align-items: center;
        justify-content: center;
        background: $grey-extra-light;
        overflow: hidden;
        
        img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            min-height: 100%;
        }
    }
}

// ==========================================================================
// UTILITIES AND POSITIONING
// ==========================================================================

// Sticky element mixin
@mixin sticky-element($direction: top, $offset: 0, $z: $z-sticky, $animation: false) {
    position: sticky;
    z-index: $z;

    @if $direction == top {
        top: $offset;
    } @else if $direction == bottom {
        bottom: $offset;
    } @else if $direction == left {
        left: $offset;
    } @else if $direction == right {
        right: $offset;
    }

    @if $animation {
        @include hover-effect('sticky-element'); 
    }
}

// ==========================================================================
// EFFECTS (used very frequently - 15+ times)
// ==========================================================================

// Hover effects - most used mixin
@mixin hover-effect($type, $transition: $animation-slow $animation-ease) {
    $params: map.get($hover-effects-map, $type);
    $lift: if(map.has-key($params, lift), map.get($params, lift), null);
    $background: if(map.has-key($params, background), map.get($params, background), null);
    $color: if(map.has-key($params, color), map.get($params, color), null);
    $shadow: if(map.has-key($params, shadow), map.get($params, shadow), null);
    $scale: if(map.has-key($params, scale), map.get($params, scale), null);
    
    transition: transform #{$transition}, background #{$transition}, color #{$transition}, box-shadow #{$transition};

    &:hover {
        $transform: '';

        @if $scale { $transform: $transform + ' scale(' + $scale + ')'; }

        @if $lift { $transform: $transform + ' translateY(-' + $lift + ')'; }

        @if $transform != '' { transform: string.unquote($transform); }
        
        @if $background { background: $background; }

        @if $color { color: $color; }

        @if $shadow { box-shadow: $shadow; }

        z-index: $z-hover;
    }
}

// Press effect for active states
@mixin press-effect($type, $transition: $animation-fast $animation-ease) {
    $params: map.get($press-effects-map, $type);
    $background: if(map.has-key($params, background), map.get($params, background), null);
    $color: if(map.has-key($params, color), map.get($params, color), null);
    $shadow: if(map.has-key($params, shadow), map.get($params, shadow), null);
    $scale: if(map.has-key($params, scale), map.get($params, scale), null);

    &:active, &:focus:active {
        $transform: '';

        @if $scale { $transform: $transform + ' scale(' + $scale + ')'; }

        @if $transform != '' { transform: string.unquote($transform); }

        @if $background { background: $background; }

        @if $color { color: $color; }

        @if $shadow { box-shadow: $shadow; }

        transition: #{$transition};
    }
}

// Selected effect for active elements
@mixin selected-effect($type, $transition: $animation-medium $animation-ease) {
    $params: map.get($selected-effects-map, $type);
    $background: if(map.has-key($params, background), map.get($params, background), null);
    $color: if(map.has-key($params, color), map.get($params, color), null);
    $shadow: if(map.has-key($params, shadow), map.get($params, shadow), null);
    $scale: if(map.has-key($params, scale), map.get($params, scale), null);

    transition: transform #{$transition}, background #{$transition}, color #{$transition}, box-shadow #{$transition};

    &.active, &.selected {
        $transform: '';

        @if $scale { $transform: $transform + ' scale(' + $scale + ')'; }

        @if $transform != '' { transform: string.unquote($transform); }

        @if $background { background: $background; }

        @if $color { color: $color; }

        @if $shadow { box-shadow: $shadow; }
    }
}

// Icon container mixin for header
@mixin icon-container($hover: 'header-icon', $tablet-position: center, $mobile-position: center, $gap: $space-md) {
    display: flex;
    gap: $gap;
    align-items: center;

    a {
        position: relative;
        display: inline-flex;
        padding: $space-sm;

        @include hover-effect($hover);
    }
}

// ==========================================================================
// UTILITIES (frequently used)
// ==========================================================================

// Shaded background - used 5+ times
@mixin shaded-background($image-url, $overlay: rgba(0, 0, 0, 0.4)) {
    background-image: linear-gradient($overlay, $overlay), url($image-url);
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
}

// Banner mixin - used several times
@mixin banner($path) {
    @include shaded-background($path);

    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    color: $pure-white;
    text-align: center;
    
    h1 {
        font-size: $font-size-3xl;
        font-weight: $font-weight-bold;
        color: $pure-white;
        margin: 0;
    }
}

// ==========================================================================
// FORMS & CONTROLS (critical for functionality)
// ==========================================================================

// Placeholders %control-base and %form-input removed - using direct styles


// Removed unnecessary placeholders for simple styles
// Замість @extend %form-group використовуємо прямо: position: relative; margin-bottom: $form-gap;
// Замість @extend %floating-label використовуємо прямі CSS стилі

// ==========================================================================
// СПЕЦИФІЧНІ МІКСІНИ (зберігаємо тільки найважливіші)
// ==========================================================================

// Section styles - використовується часто для промо-секцій
@mixin section-styles($type) {
    $params: map.get($section-style-map, $type);
    $padding-top-bottom: if(map.has-key($params, padding-top-bottom), map.get($params, padding-top-bottom), 0);
    $padding-left: if(map.has-key($params, padding-left), map.get($params, padding-left), $space-4xl);
    $gap: if(map.has-key($params, gap), map.get($params, gap), $space-lg);
    
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    text-align: start;
    padding: $padding-top-bottom $padding-left;
    gap: $gap;

    h2 {
        $title-color: if(map.has-key($params, title-color), map.get($params, title-color), $text-color);
        $title-size: if(map.has-key($params, title-size), map.get($params, title-size), $font-size-2xl);    

        font-size: $title-size;
        font-weight: $font-weight-black;
        line-height: $line-height-single;
        color: $title-color;
        margin: 0;
    }

    p {
        $text-color: if(map.has-key($params, text-color), map.get($params, text-color), $grey-dark);
        $text-size: if(map.has-key($params, text-size), map.get($params, text-size), $font-size-sm);

        font-size: $text-size;
        font-weight: $font-weight-normal;
        line-height: $line-height-base;
        color: $text-color;
    }
	}

  // Checkbox - специфічний але важливий
@mixin checkbox-round($size: $checkbox-size, $type: 'round') {
    width: $size;
    height: $size;
    margin: 0;
    appearance: none;
    border: $checkbox-border-width solid $checkbox-border-color;
    background: $checkbox-bg-color;
    cursor: pointer;
    position: relative;
    transition: all $animation-medium $animation-ease;
    
    @if $type == 'round' {
        border-radius: 50%;
    } @else {
        border-radius: $radius-s;
    }
    
    &:checked {
        background: $checkbox-bg-color-checked;
        border-color: $checkbox-bg-color-checked;
        
        &::after {
            content: '';
            position: absolute;
            width: $checkbox-dot-size;
            height: $checkbox-dot-size;
            background: $checkbox-dot-color;
            border-radius: 50%;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    }
}

// Divider - простий і часто використовуваний
@mixin divider($color: $accent-pink, $border: $border) {
    border: $border solid $color;
    width: 100%;
}

// Modal backdrop placeholder for @extend
%modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: $modal-backdrop;
    z-index: $z-modal-backdrop;
    display: flex;
    justify-content: center;
    align-items: center;
}

@mixin modal-content($min-width: $modal-min-width, $max-width: $modal-max-width) {
    background: $pure-white;
    min-width: $min-width;
    max-width: $max-width;
    width: 90%;
    position: fixed;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    max-height: $modal-max-height;
    overflow: auto;
    box-shadow: $shadow-modal;
    z-index: $z-modal;
}
