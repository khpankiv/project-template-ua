@use 'sass:string';
// @use 'sass:color';
// =============================================================================
// ================ Mixins =====================================================
// =============================================================================
// 
// MODERNIZED:
// - Removed responsive-size mixin → using clamp() in variables
// - Removed font-parameters mixin → using direct CSS properties with clamp() variables
// - Updated grid and flex mixins for modern approach and simplicity
//
// =============================================================================


// Modern adaptive grid with flexible settings
@mixin grid-responsive($min-width: $min-grid-width-4el, $gap: $space-lg, $items-center: false) {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
    gap: $gap;
    @if $items-center {
        justify-items: center;
        align-items: center;
    }
}

// Simplified adaptive flex container
@mixin flex-responsive($direction: row, $gap: null, $wrap: null, $mobile-direction: null) {
    display: flex;
    flex-direction: $direction;
    @if $gap { gap: $gap; }
    @if $wrap { flex-wrap: $wrap; }
    
    @if $mobile-direction {
        @media (max-width: $breakpoint-mobile) {
            flex-direction: $mobile-direction;
        }
    }
}
// ==========================================================================
// Sticky element mixin
// $direction: 'top', 'bottom', 'left', 'right'
// ==========================================================================
@mixin sticky-element($direction: top, $offset: 0, $z: $z-sticky, $animation: false) {
    position: sticky;
    z-index: $z;
    @if $direction == top {
        top: $offset;
    } @else if $direction == bottom {
        bottom: $offset;
    } @else if $direction == left {
        left: $offset;
    } @else if $direction == right {
        right: $offset;
    }
    @if $animation {
        @include hover-effect('sticky-element'); 
    }
}

// ==================================================================
// Offer Mixins for promotional sections
// =================================================================
@mixin section-styles($type) {
    $params: map-get($section-style-map, $type);
    $padding-top-bottom: if(map-has-key($params, padding-top-bottom), 
                            map-get($params, padding-top-bottom), 0);
    $padding-left: if(map-has-key($params, padding-left), 
                        map-get($params, padding-left),  $space-4xl);
    $gap: if(map-has-key($params, gap), map-get($params, gap), $space-lg);
    
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
		text-align: start;

    padding: $padding-top-bottom $padding-left;
    gap: $gap;

    h2 {
			$title-color: if(map-has-key($params, title-color), 
											map-get($params, title-color), $text-color);
			$title-size: if(map-has-key($params, title-size), 
											map-get($params, title-size), $font-size-2xl);    
			font-size: $title-size;
			font-weight: $font-weight-black;
			line-height: $line-height-single;
			color: $title-color;
				margin: 0;
    }

    p {
			$text-color: if(map-has-key($params, text-color), map-get($params, text-color), $grey-dark);
			$text-size: if(map-has-key($params, text-size), map-get($params, text-size), $font-size-sm);
			font-size: $text-size;
			font-weight: $font-weight-normal;
			line-height: $line-height-base;
			color: $text-color;
    }

    button {
			@include button('btn-base');
    }
}

// ==================================================================
// Banner mixin on offer sections
// ==================================================================
@mixin banner ($path) {
	@include shaded-background($path);
	width: 100%;
	height: 100%;
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	font-size: $font-size-sm;
	font-weight: $font-weight-normal;
	line-height: $line-height-base;
	color: $pure-white;
	text-align: center;
	padding: 0; // Remove any default padding

	h1 {
		font-size: $font-size-3xl;
		font-weight: $font-weight-bold;
		line-height: $line-height-base;
		color: $pure-white;
		margin: 0;
	}
}

// =============================================================================
// Universal selected effect mixin
// =============================================================================
@mixin selected-effect($type, $transition: $animation-medium $animation-ease) {
    $params: map-get($selected-effects-map, $type);
    $background: if(map-has-key($params, background), map-get($params, background), null);
    $color: if(map-has-key($params, color), map-get($params, color), null);
    $shadow: if(map-has-key($params, shadow), map-get($params, shadow), null);
    $scale: if(map-has-key($params, scale), map-get($params, scale), null);
		$text-decoration: if(map-has-key($params, text-decoration), map-get($params, text-decoration), null);
		$text-decoration-color: if(map-has-key($params, text-decoration-color), map-get($params, text-decoration-color), null);
    $z-index: if(map-has-key($params, z-index), map-get($params, z-index), null);
		$height: if(map-has-key($params, height), map-get($params, height), null);
		$flex: if(map-has-key($params, flex), map-get($params, flex), null);

    transition:
			transform #{$transition},
			background #{$transition},
			color #{$transition},
			box-shadow #{$transition},
			flex #{$transition},
			height #{$transition};

    &.active, &.selected {
			$transform: '';
			@if $scale { $transform: $transform + ' scale(' + $scale + ')'; }
			@if $transform != '' { transform: unquote($transform); }
			@if $background {background: $background;}
			@if $color {color: $color;}
			@if $shadow {box-shadow: $shadow;}
			@if $text-decoration {text-decoration: $text-decoration;}
			@if $text-decoration-color {text-decoration-color: $text-decoration-color;}
			@if $z-index {z-index: $z-index;}
    }
}

// ===============================================================================
// Press effect mixin for :active states
// ===============================================================================
@mixin press-effect($type, $transition: $animation-fast $animation-ease) {
    $params: map-get($press-effects-map, $type);
    $background: if(map-has-key($params, background), map-get($params, background), null);
    $color: if(map-has-key($params, color), map-get($params, color), null);
    $shadow: if(map-has-key($params, shadow), map-get($params, shadow), null);
    $scale: if(map-has-key($params, scale), map-get($params, scale), null);
    $custom-transition: if(map-has-key($params, transition), map-get($params, transition), $transition);

    &:active, &:focus:active {
        $transform: '';
        @if $scale { $transform: $transform + ' scale(' + $scale + ')'; }
        @if $transform != '' { transform: string.unquote($transform); }
        @if $background { background: $background; }
        @if $color { color: $color; }
        @if $shadow { box-shadow: $shadow; }
        transition: #{$custom-transition};
    }
}

// ===============================================================================
// Universal hover effect mixin
// ===============================================================================
@mixin hover-effect($type, $transition: $animation-slow $animation-ease) {
    $params: map-get($hover-effects-map, $type);
    $rotate: if(map-has-key($params, rotate), map-get($params, rotate), null);
    $lift: if(map-has-key($params, lift), map-get($params, lift), null);
    $opacity-from: if(map-has-key($params, opacity-from), map-get($params, opacity-from), 1);
    $opacity-to: if(map-has-key($params, opacity-to), map-get($params, opacity-to), 1);
    $background: if(map-has-key($params, background), map-get($params, background), null);
    $color: if(map-has-key($params, color), map-get($params, color), null);
    $shadow: if(map-has-key($params, shadow), map-get($params, shadow), null);
    $scale: if(map-has-key($params, scale), map-get($params, scale), null);
    $hover-bg-adjust: if(map-has-key($params, hover-bg-adjust), map-get($params, hover-bg-adjust), null);
		$text-decoration: if(map-has-key($params, text-decoration), map-get($params, text-decoration), null);
		$text-decoration-color: if(map-has-key($params, text-decoration-color), map-get($params, text-decoration-color), null);
    transition:
			opacity #{$transition},
			transform #{$transition},
			background #{$transition},
			color #{$transition},
			box-shadow #{$transition};
    
    opacity: $opacity-from;

    &:hover {
			$transform: '';
			@if $scale { $transform: $transform + ' scale(' + $scale + ')'; }
			@if $lift { $transform: $transform + ' translateY(-' + $lift + ')'; }
			@if $rotate { $transform: $transform + ' rotate(' + $rotate + ')'; }
			@if $transform != '' { transform: unquote($transform); }
			@if $hover-bg-adjust != null and $background != null {
					background: color.adjust($background, $lightness: map-get($hover-bg-adjust, lightness));
			} @else if $background {
				background: $background;
				opacity: $opacity-to;
			}
			z-index: $z-hover;
			@if $color {color: $color;}
			@if $shadow {box-shadow: $shadow;}
			@if $text-decoration {text-decoration: $text-decoration;}
			@if $text-decoration-color {text-decoration-color: $text-decoration-color;}
				
		}
}

// ==================================================================
// Icon container mixin for header 
// ==================================================================
@mixin icon-container(
    $hover: 'header-icon', 
    $tablet-position: center, 
    $mobile-position: center, 
    $gap: $space-md) 
    {
			display: flex;
			gap: $gap;
			align-items: center;

			a {
				position: relative;
				display: inline-flex;
				padding: $space-sm;
				@include hover-effect($hover);
			}
}

// ==================================================================
// Input styles mixin
// ==================================================================
@mixin input-styles($border-color: $grey-light,
										$padding: $space-md $space-lg, 
										$font-size: $input-font-size,	) {
		padding: $padding;
		position: relative;
		width: 100%;
		min-height: $input-height;
		font-size: $font-size;
		border: $border solid $border-color;
		background: $pure-white;
		color: $input-text-color;
		font-family: 'Montserrat', Arial, sans-serif;
		transition: border-color $animation-fast, box-shadow $animation-fast;
}

// Compact input styles for filters and dropdowns
@mixin compact-input-styles() {
	@include base-input;
	padding: $space-md;
	height: $input-height;
}
// ==================================================================
//     @media (max-width: $breakpoint-tablet) {
//         justify-self: $tablet-position;
//     }

//     @media (max-width: $breakpoint-mobile) {
//         justify-content: $mobile-position;
//     }

// ==================================================================
// =========Animation mixins========================================
// ==================================================================

@mixin fadeIn($duration: $animation-medium) {
    animation: fadeIn $duration ease-out;
}

@mixin slideDown($duration: $animation-medium) {
    animation: slideDown $duration ease-out;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes slideDown {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

// Animation for form validation errors
@keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-4px); }
    75% { transform: translateX(4px); }
}


// Additional animation mixins removed - using active animations above


// ======================================================
// Modal Mixins
// ======================================================

@mixin modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: $modal-backdrop;
    z-index: $z-modal-backdrop;
    display: flex;
    justify-content: center;
    align-items: center;
}

@mixin modal-content($min-width: $modal-min-width, $max-width: $modal-max-width) {
    background: $pure-white;
    min-width: $min-width;
    max-width: $max-width;
    width: 90%;
		position: fixed;
		left: 50%;
		top: 50%;
		transform: translate(-50%, -50%);
    max-height: $modal-max-height;
    overflow: auto;
    box-shadow: $shadow-modal;
    z-index: $z-modal;
}


// // Loading Spinner
// @mixin loading-spinner($size: 16px, $border-width: 2px) {
//     &.loading {
//         position: relative;
//         color: transparent;
        
//         &::after {
//             content: '';
//             position: absolute;
//             top: 50%;
//             left: 50%;
//             transform: translate(-50%, -50%);
//             width: $size;
//             height: $size;
//             border: $border-width solid rgba(0, 0, 0, 0.2);
//             border-top: $border-width solid currentColor;
//             border-radius: 50%;
//             animation: spin 1s linear infinite;
//         }
//     }
    
//     @keyframes spin {
//         to {
//             transform: translate(-50%, -50%) rotate(360deg);
//         }
//     }
// }


// ============================================================
// Utility Mixins 
// ===========================================================

// @mixin truncate {
//     overflow: hidden;
//     text-overflow: ellipsis;
//     white-space: nowrap;
// }

// =============Checkbox mixin for consistent styling=====================
@mixin checkbox-round($size: $checkbox-size, $type: 'round') {
    width: $size;
    height: $size;
    margin: 0;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    border: $checkbox-border-width solid $checkbox-border-color;
    background: $checkbox-bg-color;
    cursor: pointer;
    position: relative;
    transition: all $animation-medium $animation-ease;
    
    @if $type == 'round' {
        border-radius: 50%;
    } @else {
        border-radius: $radius-s;
    }
    
    &:checked {
        background: $checkbox-bg-color-checked;
        border-color: $checkbox-bg-color-checked;
        
        &::after {
            content: '';
            position: absolute;
            width: $checkbox-dot-size;
            height: $checkbox-dot-size;
            background: $checkbox-dot-color;
            border-radius: 50%;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    }
    
    &:hover {
        border-color: $checkbox-border-color-hover;
        box-shadow: 0 0 0 2px rgba($checkbox-border-color-hover, 0.1);
    }
    
    &:focus {
        outline: 2px solid $checkbox-focus-shadow;
        outline-offset: 2px;
    }
}

// =============Horizontal line divider mixin=====================
@mixin divider($color:$accent-pink, $border: $border) {
    border: $border solid $color;
    width: 100%;
}

// ====================Shaded background mixin=========================
@mixin shaded-background($image-url, $overlay: rgba(0, 0, 0, 0.4)) {
    background-image: linear-gradient($overlay, $overlay), url($image-url);
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    position: relative;
		width: 100%;
}

// ===================================================
// Form Mixins
// ===================================================

// Base input field styling
@mixin base-input {
    width: 100%;
    padding: $space-md;
    border: $border solid $form-input-border-color;
    border-radius: $radius-s;
    background: $form-input-bg-color;
    color: $form-input-text-color;
    font-size: $input-font-size;
    font-family: inherit;
    min-height: $input-height;
    transition: border-color $animation-fast $animation-ease;
    
    &:focus {
        outline: none;
        border-color: $form-input-border-color-focused;
        box-shadow: $shadow-form-focus;
    }
    
    &::placeholder {
        color: $input-text-color;
        opacity: 1;
    }
    
    &.error {
        border-color: $form-input-border-color-error;
        animation: shake 0.3s ease-in-out;
    }
    
    &:disabled {
        background: $grey-extra-light;
        cursor: not-allowed;
        opacity: 0.6;
    }
}

// Floating label styling
@mixin floating-label {
    position: absolute;
    left: $space-md;
    top: 50%;
    transform: translateY(-50%);
    background: $form-input-bg-color;
    padding: $floating-label-padding;
    color: $form-label-color;
    font-size: $font-size-sm;
    pointer-events: none;
    transition: all $animation-fast $animation-ease;
    z-index: 1;
    
    .required-star {
        color: $form-label-required-color;
    }
}

// Floating label active state
@mixin floating-label-active {
    top: 0;
    transform: translateY($floating-label-offset) scale($floating-label-scale);
    color: $form-label-color-focused;
    
    .required-star {
        color: $form-label-required-color;
    }
}

// Form group container
@mixin form-group {
    position: relative;
    margin-bottom: $form-gap;
}

// Form grid layout
@mixin form-grid($columns: 2, $gap: $form-gap) {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);
    gap: $gap;
    
    @include mobile {
        grid-template-columns: 1fr;
    }
}

// Responsive media query mixin
@mixin mobile {
    @media (max-width: $breakpoint-mobile) {
        @content;
    }
}

@mixin tablet {
    @media (max-width: $breakpoint-tablet) {
        @content;
    }
}

@mixin desktop {
    @media (min-width: $breakpoint-desktop) {
        @content;
    }
}

// Split section (dual layout for image + content)
@mixin split-section($image-side: left) {
    display: grid;
    grid-template-columns: if($image-side == left, 1fr 1fr, 1fr 1fr);
    min-height: clamp(25rem, 20rem + 20vw, 40rem); // 400px → 640px
    gap: 0;
    
    @include tablet {
        grid-template-columns: 1fr;
        min-height: auto;
        
        .offer-banner {
            @if $image-side == right {
                order: 2;
            }
        }
    }
    
    .offer-banner {
        display: flex;
        align-items: center;
        justify-content: center;
        background: $grey-extra-light;
        
        img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
    }
    
    .review-form {
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: $space-2xl;
        background: $pure-white;
    }
}

// ===================================================
// Catalog Page Mixins
// ===================================================

// Dropdown container styling
@mixin dropdown-container($max-width: $dropdown-max-width, $min-width: $dropdown-min-width) {
    position: relative;
    display: inline-block;
    width: 100%;
    max-width: $max-width;
    min-width: $min-width;
    flex-shrink: 0;
}

// Dropdown button styling
@mixin dropdown-button {
    @include compact-input-styles;
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    
    span {
        flex: 1;
        text-align: left;
        color: $form-input-text-color;
    }
    
    img {
        width: $dropdown-arrow-size;
        height: $dropdown-arrow-size;
        transition: transform $animation-fast $animation-ease;
        flex-shrink: 0;
    }
    
    &.active img {
        transform: rotate(180deg);
    }
    
    &:hover {
        border-color: $form-input-border-color-focused;
        @include hover-effect('dropdown-option');
    }
}

// Dropdown options list styling
@mixin dropdown-options {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: $form-input-bg-color;
    border: 2px solid $form-input-border-color;
    border-top: none;
    border-radius: 0;
    z-index: $dropdown-z-index;
    max-height: $dropdown-max-height;
    overflow-y: auto;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-$space-sm);
    transition: all $animation-fast $animation-ease;
    
    &.show {
        opacity: 1;
        visibility: visible;
        transform: translateY(0);
    }
    
    li {
        list-style: none;
        padding: $space-sm $space-md;
        cursor: pointer;
        color: $form-input-text-color;
        font-size: $font-size-sm;
        transition: all $animation-fast $animation-ease;
        
        &:hover {
            @include hover-effect('dropdown-option');
        }
        
        &.selected {
            @include selected-effect('dropdown-option');
        }
    }
}

// Search field container styling
@mixin search-field-container {
    position: relative;
    margin-bottom: $space-lg;
    max-width: $search-field-max-width;
    width: 100%;
}

// Search icon positioning
@mixin search-icon-position {
    position: absolute;
    right: $space-md;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    width: $search-icon-container-size;
    height: $search-icon-container-size;
    transition: all $animation-fast $animation-ease;
    
    &:hover {
        @include hover-effect('search-icon');
    }
    
    img {
        width: $search-icon-size;
        height: $search-icon-size;
    }
}

// Product grid responsive layout
@mixin product-grid-layout {
    display: grid;
    gap: $space-lg;
    margin-bottom: $space-lg;
    width: 100%;
    min-width: 0;
    align-items: start;
    align-content: start;
    transition: opacity $animation-medium $animation-ease;
    
    // Desktop first approach
    grid-template-columns: repeat(auto-fit, minmax($product-grid-min-width-md, 1fr));
    
    @media (min-width: $breakpoint-desktop) {
        grid-template-columns: repeat(3, 1fr);
        gap: $space-xl $space-lg;
    }
    
    @media (max-width: $breakpoint-tablet) {
        grid-template-columns: repeat(auto-fit, minmax($product-grid-min-width-sm, 1fr));
        gap: $space-md;
    }
    
    @media (max-width: $breakpoint-mobile) {
        grid-template-columns: repeat(auto-fit, minmax($product-grid-min-width-lg, 1fr));
        gap: $space-md;
    }
    
    &.loading {
        opacity: 0.5;
    }
}

// Filters grid layout
@mixin filters-grid-layout {
    padding: $space-lg 0;
    gap: $space-lg;
    @include grid-responsive($min-grid-width-4el, $space-lg);
    
    @media (max-width: $breakpoint-tablet) {
        padding: $space-md 0;
        gap: $space-md;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    }
    
    @media (max-width: $breakpoint-mobile) {
        grid-template-columns: 1fr;
        gap: $space-sm;
        padding: $space-md 0;
    }
}

// Catalog page layout container
@mixin catalog-layout {
    display: grid;
    grid-template-columns: $catalog-sidebar-ratio;
    gap: $catalog-main-gap;
    
    @media (max-width: $breakpoint-tablet) {
        grid-template-columns: 1fr;
        gap: $space-md;
        
        .sidebar {
            order: -1;
            margin-bottom: $space-md;
        }
    }
}
